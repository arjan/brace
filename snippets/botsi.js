ace.define("ace/snippets/botsi",["require","exports","module"],function(e,t,n){"use strict";t.snippetText='##############################################\n# Botsi snippets                             #\n# https://cloud9-sdk.readme.io/docs/snippets #\n##############################################\n\n## Interactions\n\nsnippet say\n  say "${1:Hello there!}"${2:, quick_replies: ["Hi"]}${3:, class: ["large"]}\n\nsnippet ask\n  ask "${1:What is your name?}"${2:, expecting: [:text]}${3:, quick_replies: ["skip"]}\n\nsnippet askemail\n  ${1:email} = ask "${2:Enter your email}", expecting: :email\n\nsnippet askimage\n  ${1:image} = ask "${2:Upload an image}", expecting: :image\n\nsnippet asklocation\n  ${1:image} = ask "${2:Share your location}", expecting: :location\n\nsnippet askyesno\n  ask "${1:Do you like this?}", expecting: [:yes, :no]\n\nsnippet image\n  show image "${1:https://studio.botsqd.com/images/botsquad-logo.png}"\n\nsnippet location\n  show location [${1:4.89341}, ${2:52.364909}]\n\nsnippet pause\n  pause ${1:3}\n\nsnippet type\n  type ${1:3}\n\nsnippet buttons\n  buttons "${1:Please click one of these:}" do\n  "${2:Button 1}" ->\n    postback "${3:button1}"\n  "${4:Button 2}" ->\n    open "${5:https://www.botsquad.com}"\n  end\n\nsnippet template\n  template do\n    "The hat shop 1" ->\n      image_url "http://via.placeholder.com/150x150"\n      subtitle "We\'ve got the right hat for everyone."\n      default_action do\n        open "http://www.redhat.com"\n      end\n\n      buttons do\n        "View Website" ->\n          open "http://www.redhat.com"\n        "Say hello" ->\n          postback "postback:1"\n      end\n  end\n\n## Control flow\n\nsnippet ifyesno\n  if ${1:answer == :yes} do\n    ${0}\n  end\n\nsnippet if\n  if ${1:condition} do\n    ${0}\n  end\n\nsnippet ifelse\n  if ${1:condition} do\n    ${2}\n  else\n    ${3}\n  end\n\nsnippet else\n  else ${1:condition}\n    ${2}\n  end\n\nsnippet branch\n  branch do\n  ${1:condition} ->\n    ${2}\n  ${3:condition} ->\n    ${4}\n  end\n\nsnippet random\n  random do\n    say "${1:First thing}"\n    say "${2:Another thing}"\n  end\n\nsnippet repeat\n  repeat ${1:count} in ${2:[5, 4, 3, 2, 1]} do\n    say "${3:Counting down... #{count}}"\n  end\n\nsnippet inv\n  invoke ${1:mydialog}\n\nsnippet perf\n  perform ${1:mytask}\n\n## State\n\nsnippet rem\n  remember ${1:variable}\n\nsnippet forget\n  forget ${1:variable}\n\nsnippet tag\n  tag "${1:flag}"\n\nsnippet untag\n  untag "${1:flag}"\n\n## Debug\n\nsnippet log\n  log "${1:message}"\n\n## HTTP\nsnippet hget\n  http_get "${1:http://httpbin.org/get}?${2:param}=#{url_encode(${3:variable})}"\n  log http\n\nsnippet hpost\n  http_post "${1:http://httpbin.org/post}", [${2:param}: "#{${3:variable}}"]\n  log http\n\nsnippet hdelete\n  http_delete "${1:http://httpbin.org/anything}"\n  log http\n\nsnippet hput\n  http_put "${1:http://httpbin.org/anything}"\n  log http\n\n## Events\n\nsnippet emit\n  emit "${1:event}", to: ${2:self}${3:, in: "10m"}${4:, [${5:payload]}]}\n\n## Dialogs\n\nsnippet dialog\n  dialog ${1:mydialog} do\n    ${0}\n  end\n\nsnippet dtrigger\n  dialog trigger: "${1:hello|welcome|hi}" do\n    ${0}\n  end\n\nsnippet devent\n  dialog event: "${1:button1}" do\n    ${0}\n  end\nsnippet dlocation\n  dialog(location: [${1:52.364909}, ${2:4.893414}], radius: ${3:100}) do\n    ${0}\n  end\n\n## Special dialogs\n\nsnippet unknown\n  dialog __unknown__ do\n    ${0}\n  end\n\nsnippet returning\n  dialog __returning__ do\n    ${0}\n  end\n\nsnippet unknown_event\n  dialog __unknown_event__ do\n    ${0}\n  end\n\nsnippet timeout\n  dialog __timeout__ do\n    ${0}\n  end\n\nsnippet unknown_location\n  dialog __unknown_location__ do\n    ${0}\n  end\n\nsnippet unknown_attachment\n  dialog __unknown_attachment__ do\n    ${0}\n  end\n\n## Tasks\n\nsnippet task\n  task ${1:mytask} do\n    ${0}\n  end\n\nsnippet tevent\n  task event: "${1:ping}" do\n    ${0}\n  end\n\nsnippet attr\n  @${1:label} ${2:value}\n\nsnippet int\n  @${1:label} intent(learn: ${2:[]})\n\nsnippet ent\n  @${1:label} entity(match: "${2}")\n\n## Elixir\n\nsnippet elixir\n  elixir do\n    def ${1:name}() do\n      ${0}\n    end\n  end\n',t.scope="botsi"})